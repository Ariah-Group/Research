/*
 * Copyright 2005-2014 The Kuali Foundation.
 * 
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.opensource.org/licenses/ecl1.php
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.kra.s2s.generator.impl;

import gov.grants.apply.forms.nsfCoverPage16V16.NSFCoverPage16Document;
import gov.grants.apply.forms.nsfCoverPage16V16.NSFCoverPage16Document.NSFCoverPage16;
import gov.grants.apply.forms.nsfCoverPage16V16.NSFCoverPage16Document.NSFCoverPage16.*;
import gov.grants.apply.system.attachmentsV10.AttachedFileDataType;
import gov.grants.apply.system.attachmentsV10.AttachmentGroupMin1Max100DataType;
import gov.grants.apply.system.globalLibraryV20.YesNoDataType;
import org.apache.xmlbeans.XmlObject;
import org.kuali.kra.bo.Organization;
import org.kuali.kra.bo.OrganizationYnq;
import org.kuali.kra.infrastructure.KraServiceLocator;
import org.kuali.kra.proposaldevelopment.bo.DevelopmentProposal;
import org.kuali.kra.proposaldevelopment.bo.Narrative;
import org.kuali.kra.proposaldevelopment.bo.ProposalPerson;
import org.kuali.kra.proposaldevelopment.bo.ProposalSite;
import org.kuali.kra.proposaldevelopment.document.ProposalDevelopmentDocument;
import org.kuali.kra.proposaldevelopment.questionnaire.ProposalPersonModuleQuestionnaireBean;
import org.kuali.kra.questionnaire.answer.Answer;
import org.kuali.kra.questionnaire.answer.AnswerHeader;
import org.kuali.kra.questionnaire.answer.QuestionnaireAnswerService;
import org.kuali.kra.s2s.generator.S2SQuestionnairing;
import org.kuali.kra.s2s.util.S2SConstants;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.kuali.kra.s2s.bo.S2sOpportunity;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * This class is used to generate XML Document object for grants.gov
 * NSFCoverPageV1.6. This form is generated using XMLBean API's generated by
 * compiling NSFCoverPageV1.6 schema.
 *
 */
public class NSFCoverPageV1_6Generator extends NSFCoverPageBaseGenerator implements S2SQuestionnairing {

    private static final int QUESTIONID_CURRENT_PI = 52;
    private static final int QUESTIONID_BEGIN_INVESTIGATOR = 53;
    private static final int QUESTIONID_ACCOMPLISHMENT_RENEWAL = 56;
    private static final int QUESTIONID_FUNDING_MECH = 101000;
    private static final int QUESTIONID_LOBBYING_ACT = 10088;

    private static final int NARRATIVE_TYPE_DATA_MANAGEMENT = 200;
    private static final int NARRATIVE_TYPE_MENTORING = 400;
    private static final Log LOG = LogFactory.getLog(NSFCoverPageV1_6Generator.class);

    /**
     *
     * This method returns NSFCoverPage16Document object based on proposal
     * development document which contains the NSFCoverPage16Document
     * informations
     * NSFUnitConsideration,FundingOpportunityNumber,PIInfo,CoPIInfo,OtherInfo,and
     * SingleCopyDocuments for a particular proposal
     *
     * @return nsfCoverPage16Document {@link XmlObject} of type
     * NSFCoverPage16Document.
     */
    private NSFCoverPage16Document getNSFCoverPage16() {

        NSFCoverPage16Document nsfCoverPage16Document = NSFCoverPage16Document.Factory.newInstance();
        NSFCoverPage16 nsfCoverPage16 = NSFCoverPage16.Factory.newInstance();
        nsfCoverPage16.setFormVersion(S2SConstants.FORMVERSION_1_6);
        setFundingOpportunityNumber(nsfCoverPage16);

        DevelopmentProposal devProposal = pdDoc.getDevelopmentProposal();
        S2sOpportunity s2sOpp = devProposal.getS2sOpportunity();

        if (s2sOpp != null && s2sOpp.getClosingDate() != null) {
            nsfCoverPage16.setDueDate(dateTimeService.getCalendar(s2sOpp.getClosingDate()));
        }

        nsfCoverPage16.setNSFUnitConsideration(getNSFUnitConsideration());

        setOtherInfo(nsfCoverPage16);

        AttachedFileDataType mentoringPlanAttachment = getNarrativeAttachmentMentoringPlan();
        if (mentoringPlanAttachment != null) {
            nsfCoverPage16.setMentoringPlan(mentoringPlanAttachment);
        }

        AttachedFileDataType dataManPlanAttachment = getNarrativeAttachmentDataManagement();
        if (dataManPlanAttachment != null) {
            nsfCoverPage16.setDataManagementPlan(dataManPlanAttachment);
        }

        AttachmentGroupMin1Max100DataType attachmentGroup = AttachmentGroupMin1Max100DataType.Factory.newInstance();
        attachmentGroup.setAttachedFileArray(getAttachedFileDataTypes());

        if (attachmentGroup.getAttachedFileArray().length > 0) {
            nsfCoverPage16.setSingleCopyDocuments(attachmentGroup);
        }

        nsfCoverPage16Document.setNSFCoverPage16(nsfCoverPage16);
        return nsfCoverPage16Document;
    }

    private AttachedFileDataType getNarrativeAttachmentMentoringPlan() {
        for (Narrative narrFile : pdDoc.getDevelopmentProposal().getNarratives()) {
            if (narrFile.getNarrativeTypeCode() != null && NARRATIVE_TYPE_MENTORING == Integer.parseInt(narrFile.getNarrativeTypeCode())) {

                AttachedFileDataType attachment = getAttachedFileType(narrFile);
                if (attachment != null) {
                    return attachment;
                }
            }
        }
        return null;
    }

    private AttachedFileDataType getNarrativeAttachmentDataManagement() {
        for (Narrative narrFile : pdDoc.getDevelopmentProposal().getNarratives()) {
            if (narrFile.getNarrativeTypeCode() != null && NARRATIVE_TYPE_DATA_MANAGEMENT == Integer.parseInt(narrFile.getNarrativeTypeCode())) {

                AttachedFileDataType attachment = getAttachedFileType(narrFile);
                if (attachment != null) {
                    return attachment;
                }
            }
        }
        return null;
    }

    private void setFundingOpportunityNumber(NSFCoverPage16 nsfCoverPage16) {

        DevelopmentProposal devProposal = pdDoc.getDevelopmentProposal();
        String programAncNumber = devProposal.getProgramAnnouncementNumber();

        if (programAncNumber != null) {
            if (programAncNumber.length() > PROGRAM_ANNOUNCEMENT_NUMBER_MAX_LENGTH) {
                nsfCoverPage16.setFundingOpportunityNumber(programAncNumber.substring(0, PROGRAM_ANNOUNCEMENT_NUMBER_MAX_LENGTH));
            } else {
                nsfCoverPage16.setFundingOpportunityNumber(programAncNumber);
            }
        }
    }

    /**
     *
     * This method returns Investigator
     * status,DisclosureLobbyingActivities,ExploratoryResearch,HistoricPlaces,
     * HighResolutionGraphics and AccomplishmentRenewal information for the
     * OtherInfo type.
     *
     * @param nsfCoverPage16
     *
     * @return OtherInfo object containing other informations about the
     * principal investigator.
     */
    private void setOtherInfo(NSFCoverPage16 nsfCoverPage16) {

        OtherInfo otherInfo = OtherInfo.Factory.newInstance();
        PIInfo pInfo = PIInfo.Factory.newInstance();

        LOG.error("setOtherInfo running... on getFormName() = " + getFormName());

        for (Answer questionnaireAnswer : s2sUtilService.getQuestionnaireAnswers(pdDoc.getDevelopmentProposal(), getNamespace(), getFormName())) {

            String answer = questionnaireAnswer.getAnswer();
            int questionId = questionnaireAnswer.getQuestion().getQuestionIdAsInteger();

            LOG.error("setOtherInfo questionId = " + questionId + " , answer = " + answer);

            if (answer != null) {
                switch (questionId) {
                    case QUESTIONID_FUNDING_MECH:

                        if (FundingMechanism.IDEAS_LAB.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.IDEAS_LAB);

                        } else if (FundingMechanism.FACILITY_CENTER.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.FACILITY_CENTER);

                        } else if (FundingMechanism.EQUIPMENT.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.EQUIPMENT);

                        } else if (FundingMechanism.CONFERENCE.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.CONFERENCE);

                        } else if (FundingMechanism.EAGER.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.EAGER);

                        } else if (FundingMechanism.FELLOWSHIP.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.FELLOWSHIP);

                        } else if (FundingMechanism.RAPID.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.RAPID);

                        } else if (FundingMechanism.INTERNATIONAL_TRAVEL.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.INTERNATIONAL_TRAVEL);

                        } else if (FundingMechanism.RESEARCH_OTHER_THAN_RAPID_OR_EAGER.toString().equalsIgnoreCase(answer)) {
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.RESEARCH_OTHER_THAN_RAPID_OR_EAGER);
                        } else {
                            LOG.error("ERROR FundingMechanism unknown match:  " + answer);
                            nsfCoverPage16.setFundingMechanism(FundingMechanism.RESEARCH_OTHER_THAN_RAPID_OR_EAGER);
                        }

                        break;

                    case QUESTIONID_CURRENT_PI:

                        if (answer.equals(S2SConstants.PROPOSAL_YNQ_ANSWER_Y)) {
                            pInfo.setIsCurrentPI(YesNoDataType.Y_YES);
                        } else {
                            pInfo.setIsCurrentPI(YesNoDataType.N_NO);
                        }
                        break;

                    case QUESTIONID_LOBBYING_ACT:

                        if (answer.equals(S2SConstants.PROPOSAL_YNQ_ANSWER_Y)) {
                            otherInfo.setIsDisclosureLobbyingActivities(YesNoDataType.Y_YES);
                        } else {
                            otherInfo.setIsDisclosureLobbyingActivities(YesNoDataType.N_NO);
                        }
                        break;

                    case QUESTIONID_BEGIN_INVESTIGATOR:

                        if (answer.equals(S2SConstants.PROPOSAL_YNQ_ANSWER_Y)) {
                            otherInfo.setIsBeginInvestigator(YesNoDataType.Y_YES);
                        } else {
                            otherInfo.setIsBeginInvestigator(YesNoDataType.N_NO);
                        }
                        break;

                    case QUESTIONID_ACCOMPLISHMENT_RENEWAL:

                        if (answer.equals(S2SConstants.PROPOSAL_YNQ_ANSWER_Y)) {
                            otherInfo.setIsAccomplishmentRenewal(YesNoDataType.Y_YES);
                        } else {
                            otherInfo.setIsAccomplishmentRenewal(YesNoDataType.N_NO);
                        }

                        break;
                    default:
                        break;
                }
            }
        }
        nsfCoverPage16.setPIInfo(pInfo);
        otherInfo.setIsDisclosureLobbyingActivities(getLobbyingAnswer());
        nsfCoverPage16.setOtherInfo(otherInfo);
    }

    /**
     *
     * This method YesNo data type Lobbying answers based on the ProposalYnq
     * QuestionId
     *
     * @return answer (YesNoDataType.Enum) corresponding to Ynq question id.
     */
    private YesNoDataType.Enum getLobbyingAnswer() {

        YesNoDataType.Enum answer = YesNoDataType.N_NO;
        DevelopmentProposal devProposal = pdDoc.getDevelopmentProposal();

        for (ProposalPerson proposalPerson : devProposal.getProposalPersons()) {

            if (proposalPerson.getProposalPersonRoleId() != null
                    && proposalPerson.getProposalPersonRoleId().equals(PRINCIPAL_INVESTIGATOR)
                    || proposalPerson.getProposalPersonRoleId().equals(PI_C0_INVESTIGATOR)) {

                ProposalPersonModuleQuestionnaireBean moduleQuestionnaireBean
                        = new ProposalPersonModuleQuestionnaireBean(devProposal, proposalPerson);

                List<AnswerHeader> headers = getQuestionnaireAnswerService().getQuestionnaireAnswer(moduleQuestionnaireBean);

                if (!headers.isEmpty()) {
                    AnswerHeader answerHeader = headers.get(0);
                    List<Answer> certificationAnswers = answerHeader.getAnswers();

                    for (Answer certificatonAnswer : certificationAnswers) {

                        if (certificatonAnswer != null && PROPOSAL_YNQ_LOBBYING_ACTIVITIES.equals(certificatonAnswer.getQuestion().getQuestionId())
                                && S2SConstants.PROPOSAL_YNQ_ANSWER_Y.equals(certificatonAnswer.getAnswer())) {
                            return YesNoDataType.Y_YES;
                        }

                    }
                }
            }
        }

        Organization organization = null;
        ProposalSite proposalSite = devProposal.getApplicantOrganization();

        if (proposalSite != null) {
            organization = proposalSite.getOrganization();
        }

        List<OrganizationYnq> organizationYnqs = null;

        if (organization != null && organization.getOrganizationId() != null) {
            organizationYnqs = getOrganizationYNQ(organization.getOrganizationId());
        }

        for (OrganizationYnq organizationYnq : organizationYnqs) {

            if (organizationYnq.getQuestionId().equals(LOBBYING_QUESTION_ID)
                    && organizationYnq.getAnswer().equals(ANSWER_INDICATOR_VALUE)) {
                return YesNoDataType.Y_YES;
            }
        }
        return answer;
    }

    /*
     * This method will get the list of Organization YNQs for a given question id.
     */
    private List<OrganizationYnq> getOrganizationYNQ(String questionId) {

        Map<String, String> organizationYnqMap = new HashMap<String, String>();
        organizationYnqMap.put(ORGANIZATION_ID_PARAMETER, questionId);

        List<OrganizationYnq> organizationYnqs = (List<OrganizationYnq>) businessObjectService.findMatching(OrganizationYnq.class, organizationYnqMap);

        return organizationYnqs;
    }

    /**
     *
     * This method returns DivisionCode and ProgramCode information for the
     * NSFUnitConsideration type.
     *
     * @return NSFUnitConsideration object containing unit consideration
     * informations like Division Code and Program code.
     */
    private NSFUnitConsideration getNSFUnitConsideration() {

        NSFUnitConsideration nsfConsideration = NSFUnitConsideration.Factory.newInstance();
        nsfConsideration.setDivisionCode(pdDoc.getDevelopmentProposal().getAgencyDivisionCode());
        nsfConsideration.setDivisionName(pdDoc.getDevelopmentProposal().getAgencyDivisionName());

        if (pdDoc.getDevelopmentProposal().getAgencyProgramCode() != null) {
            nsfConsideration.setProgramCode(pdDoc.getDevelopmentProposal().getAgencyProgramCode());
        }

        if (pdDoc.getDevelopmentProposal().getAgencyProgramName() != null) {
            nsfConsideration.setProgramName(pdDoc.getDevelopmentProposal().getAgencyProgramName());
        }

        return nsfConsideration;
    }

    /**
     *
     * This method returns attachment type for the form and it can be of type
     * Personal Data or Proprietary Information.
     *
     * @return AttachedFileDataType[] array of attachments based on the
     * narrative type code.
     */
    private AttachedFileDataType[] getAttachedFileDataTypes() {
        List<AttachedFileDataType> attachedFileDataTypeList = new ArrayList<AttachedFileDataType>();
        AttachedFileDataType attachedFileDataType = null;
        for (Narrative narrative : pdDoc.getDevelopmentProposal().getNarratives()) {
            if (narrative.getNarrativeTypeCode() != null) {
                int narrativeTypeCode = Integer.parseInt(narrative.getNarrativeTypeCode());
                if (narrativeTypeCode == PERSONAL_DATA
                        || narrativeTypeCode == PROPRIETARY_INFORMATION
                        || narrativeTypeCode == SINGLE_COPY_DOCUMENT) {
                    attachedFileDataType = getAttachedFileType(narrative);
                    if (attachedFileDataType != null) {
                        attachedFileDataTypeList.add(attachedFileDataType);
                    }
                }
            }
        }
        return attachedFileDataTypeList.toArray(new AttachedFileDataType[attachedFileDataTypeList.size()]);
    }

    /**
     * This method creates {@link XmlObject} of type
     * {@link NSFCoverPage16Document} by populating data from the given
     * {@link ProposalDevelopmentDocument}
     *
     * @param proposalDevelopmentDocument for which the {@link XmlObject} needs
     * to be created
     * @return {@link XmlObject} which is generated using the given
     * {@link ProposalDevelopmentDocument}
     * @see
     * org.kuali.kra.s2s.generator.S2SFormGenerator#getFormObject(ProposalDevelopmentDocument)
     */
    @Override
    public XmlObject getFormObject(ProposalDevelopmentDocument proposalDevelopmentDocument) {

        this.pdDoc = proposalDevelopmentDocument;
        return getNSFCoverPage16();
    }

    /**
     * This method typecasts the given {@link XmlObject} to the required
     * generator type and returns back the document of that generator type.
     *
     * @param xmlObject which needs to be converted to the document type of the
     * required generator
     * @return {@link XmlObject} document of the required generator type
     * @see
     * org.kuali.kra.s2s.generator.S2SFormGenerator#getFormObject(XmlObject)
     */
    public XmlObject getFormObject(XmlObject xmlObject) {
        NSFCoverPage16 nsfCoverPage16 = (NSFCoverPage16) xmlObject;
        NSFCoverPage16Document nsfCoverPage16Document = NSFCoverPage16Document.Factory.newInstance();
        nsfCoverPage16Document.setNSFCoverPage16(nsfCoverPage16);
        return nsfCoverPage16Document;
    }

    @Override
    public String getFormName() {
        return "NSF_CoverPage_1_6-V1.6";
    }

    @Override
    public String getNamespace() {
        return "http://apply.grants.gov/forms/NSF_CoverPage_1_6-V1.6";
    }

    private QuestionnaireAnswerService getQuestionnaireAnswerService() {
        return KraServiceLocator.getService(QuestionnaireAnswerService.class);
    }
}
